// Generated by: main
// TypeWriter: interactor
// Directive: +gen on Role

package ressources

import (
	"database/sql"

	"github.com/Solher/auth-scaffold/domain"
	"github.com/Solher/auth-scaffold/usecases"
)

type AbstractRoleRepo interface {
	Create(roles []domain.Role) ([]domain.Role, error)
	CreateOne(role *domain.Role) (*domain.Role, error)
	Find(filter *usecases.Filter, ownerRelations []domain.Relation) ([]domain.Role, error)
	FindByID(id int, filter *usecases.Filter, ownerRelations []domain.Relation) (*domain.Role, error)
	Update(roles []domain.Role, filter *usecases.Filter, ownerRelations []domain.Relation) ([]domain.Role, error)
	UpdateByID(id int, role *domain.Role, filter *usecases.Filter, ownerRelations []domain.Relation) (*domain.Role, error)
	DeleteAll(filter *usecases.Filter, ownerRelations []domain.Relation) error
	DeleteByID(id int, filter *usecases.Filter, ownerRelations []domain.Relation) error
	Raw(query string, values ...interface{}) (*sql.Rows, error)
}

type RoleInter struct {
	repo AbstractRoleRepo
}

func NewRoleInter(repo AbstractRoleRepo) *RoleInter {
	return &RoleInter{repo: repo}
}

func (i *RoleInter) Create(roles []domain.Role) ([]domain.Role, error) {
	var err error

	for i := range roles {
		err = (&roles[i]).BeforeCreate()
		if err != nil {
			return nil, err
		}
	}

	roles, err = i.repo.Create(roles)
	if err != nil {
		return nil, err
	}

	for i := range roles {
		err = (&roles[i]).AfterCreate()
		if err != nil {
			return nil, err
		}
	}

	return roles, nil
}

func (i *RoleInter) CreateOne(role *domain.Role) (*domain.Role, error) {
	role, err := i.repo.CreateOne(role)
	if err != nil {
		return nil, err
	}

	return role, nil
}

func (i *RoleInter) Find(filter *usecases.Filter, ownerRelations []domain.Relation) ([]domain.Role, error) {
	roles, err := i.repo.Find(filter, ownerRelations)
	if err != nil {
		return nil, err
	}

	return roles, nil
}

func (i *RoleInter) FindByID(id int, filter *usecases.Filter, ownerRelations []domain.Relation) (*domain.Role, error) {
	role, err := i.repo.FindByID(id, filter, ownerRelations)
	if err != nil {
		return nil, err
	}

	return role, nil
}

func (i *RoleInter) Upsert(roles []domain.Role, filter *usecases.Filter, ownerRelations []domain.Relation) ([]domain.Role, error) {
	rolesToUpdate := []domain.Role{}
	rolesToCreate := []domain.Role{}

	for _, role := range roles {
		if role.ID != 0 {
			rolesToUpdate = append(rolesToUpdate, role)
		} else {
			rolesToCreate = append(rolesToCreate, role)
		}
	}

	rolesToUpdate, err := i.repo.Update(rolesToUpdate, filter, ownerRelations)
	if err != nil {
		return nil, err
	}

	rolesToCreate, err = i.repo.Create(rolesToCreate)
	if err != nil {
		return nil, err
	}

	return append(rolesToUpdate, rolesToCreate...), nil
}

func (i *RoleInter) UpsertOne(role *domain.Role, filter *usecases.Filter, ownerRelations []domain.Relation) (*domain.Role, error) {
	var err error

	if role.ID != 0 {
		role, err = i.repo.UpdateByID(role.ID, role, filter, ownerRelations)
	} else {
		role, err = i.repo.CreateOne(role)
	}

	if err != nil {
		return nil, err
	}

	return role, nil
}

func (i *RoleInter) UpdateByID(id int, role *domain.Role,
	filter *usecases.Filter, ownerRelations []domain.Relation) (*domain.Role, error) {

	role, err := i.repo.UpdateByID(id, role, filter, ownerRelations)
	if err != nil {
		return nil, err
	}

	return role, nil
}

func (i *RoleInter) DeleteAll(filter *usecases.Filter, ownerRelations []domain.Relation) error {
	err := i.repo.DeleteAll(filter, ownerRelations)
	if err != nil {
		return err
	}

	return nil
}

func (i *RoleInter) DeleteByID(id int, filter *usecases.Filter, ownerRelations []domain.Relation) error {
	err := i.repo.DeleteByID(id, filter, ownerRelations)
	if err != nil {
		return err
	}

	return nil
}
