// Generated by: main
// TypeWriter: interactor
// Directive: +gen on Session

package ressources

import (
	"database/sql"
	"time"

	"github.com/solher/zest/domain"
	"github.com/solher/zest/usecases"
)

func init() {
	usecases.DependencyDirectory.Register(NewSessionInter)
}

type AbstractSessionRepo interface {
	Create(sessions []domain.Session) ([]domain.Session, error)
	CreateOne(session *domain.Session) (*domain.Session, error)
	Find(context usecases.QueryContext) ([]domain.Session, error)
	FindByID(id int, context usecases.QueryContext) (*domain.Session, error)
	Update(sessions []domain.Session, context usecases.QueryContext) ([]domain.Session, error)
	UpdateByID(id int, session *domain.Session, context usecases.QueryContext) (*domain.Session, error)
	DeleteAll(context usecases.QueryContext) error
	DeleteByID(id int, context usecases.QueryContext) error
	Raw(query string, values ...interface{}) (*sql.Rows, error)
}

type SessionInter struct {
	repo              AbstractSessionRepo
	sessionCacheInter usecases.AbstractSessionCacheInter
}

func NewSessionInter(repo AbstractSessionRepo) *SessionInter {
	return &SessionInter{repo: repo}
}

func (i *SessionInter) BeforeSave(session *domain.Session) error {
	session.ID = 0
	session.CreatedAt = time.Time{}
	session.UpdatedAt = time.Time{}

	err := session.ScopeModel()
	if err != nil {
		return err
	}

	return nil
}

func (i *SessionInter) AfterUpdate(session *domain.Session) error {
	err := i.sessionCacheInter.RefreshSession(session.ID)
	if err != nil {
		return err
	}

	return nil
}

func (i *SessionInter) AfterDelete(session *domain.Session) error {
	err := i.sessionCacheInter.Remove(session.AuthToken)
	if err != nil {
		return err
	}

	return nil
}

func (i *SessionInter) Create(sessions []domain.Session) ([]domain.Session, error) {
	var err error

	for k := range sessions {
		err := i.BeforeSave(&sessions[k])
		if err != nil {
			return nil, err
		}
	}

	sessions, err = i.repo.Create(sessions)
	if err != nil {
		return nil, err
	}

	return sessions, nil
}

func (i *SessionInter) CreateOne(session *domain.Session) (*domain.Session, error) {
	err := i.BeforeSave(session)
	if err != nil {
		return nil, err
	}

	session, err = i.repo.CreateOne(session)
	if err != nil {
		return nil, err
	}

	return session, nil
}

func (i *SessionInter) Find(context usecases.QueryContext) ([]domain.Session, error) {
	sessions, err := i.repo.Find(context)
	if err != nil {
		return nil, err
	}

	return sessions, nil
}

func (i *SessionInter) FindByID(id int, context usecases.QueryContext) (*domain.Session, error) {
	session, err := i.repo.FindByID(id, context)
	if err != nil {
		return nil, err
	}

	return session, nil
}

func (i *SessionInter) Upsert(sessions []domain.Session, context usecases.QueryContext) ([]domain.Session, error) {
	sessionsToUpdate := []domain.Session{}
	sessionsToCreate := []domain.Session{}

	for k := range sessions {
		err := i.BeforeSave(&sessions[k])
		if err != nil {
			return nil, err
		}

		if sessions[k].ID != 0 {
			sessionsToUpdate = append(sessionsToUpdate, sessions[k])
		} else {
			sessionsToCreate = append(sessionsToCreate, sessions[k])
		}
	}

	sessionsToUpdate, err := i.repo.Update(sessionsToUpdate, context)
	if err != nil {
		return nil, err
	}

	for k := range sessionsToUpdate {
		err := i.AfterUpdate(&sessions[k])
		if err != nil {
			return nil, err
		}
	}

	sessionsToCreate, err = i.repo.Create(sessionsToCreate)
	if err != nil {
		return nil, err
	}

	return append(sessionsToUpdate, sessionsToCreate...), nil
}

func (i *SessionInter) UpsertOne(session *domain.Session, context usecases.QueryContext) (*domain.Session, error) {
	err := i.BeforeSave(session)
	if err != nil {
		return nil, err
	}

	if session.ID != 0 {
		session, err = i.repo.UpdateByID(session.ID, session, context)

		err := i.AfterUpdate(session)
		if err != nil {
			return nil, err
		}
	} else {
		session, err = i.repo.CreateOne(session)
	}

	if err != nil {
		return nil, err
	}

	return session, nil
}

func (i *SessionInter) UpdateByID(id int, session *domain.Session,
	context usecases.QueryContext) (*domain.Session, error) {

	err := i.BeforeSave(session)
	if err != nil {
		return nil, err
	}

	session, err = i.repo.UpdateByID(id, session, context)
	if err != nil {
		return nil, err
	}

	err = i.AfterUpdate(session)
	if err != nil {
		return nil, err
	}

	return session, nil
}

func (i *SessionInter) DeleteAll(context usecases.QueryContext) error {
	context.Filter.Fields = nil

	sessions, err := i.repo.Find(context)
	if err != nil {
		return err
	}

	err = i.repo.DeleteAll(context)
	if err != nil {
		return err
	}

	for k := range sessions {
		err := i.AfterDelete(&sessions[k])
		if err != nil {
			return err
		}
	}

	return nil
}

func (i *SessionInter) DeleteByID(id int, context usecases.QueryContext) error {
	context.Filter.Fields = nil

	session, err := i.repo.FindByID(id, context)
	if err != nil {
		return err
	}

	err = i.repo.DeleteByID(id, context)
	if err != nil {
		return err
	}

	err = i.AfterDelete(session)
	if err != nil {
		return err
	}

	return nil
}
