// Generated by: main
// TypeWriter: interactor
// Directive: +gen on Session

package ressources

import (
	"database/sql"

	"github.com/Solher/zest/domain"
	"github.com/Solher/zest/usecases"
)

type AbstractSessionRepo interface {
	Create(sessions []domain.Session) ([]domain.Session, error)
	CreateOne(session *domain.Session) (*domain.Session, error)
	Find(filter *usecases.Filter, ownerRelations []domain.Relation) ([]domain.Session, error)
	FindByID(id int, filter *usecases.Filter, ownerRelations []domain.Relation) (*domain.Session, error)
	Update(sessions []domain.Session, filter *usecases.Filter, ownerRelations []domain.Relation) ([]domain.Session, error)
	UpdateByID(id int, session *domain.Session, filter *usecases.Filter, ownerRelations []domain.Relation) (*domain.Session, error)
	DeleteAll(filter *usecases.Filter, ownerRelations []domain.Relation) error
	DeleteByID(id int, filter *usecases.Filter, ownerRelations []domain.Relation) error
	Raw(query string, values ...interface{}) (*sql.Rows, error)
}

type SessionInter struct {
	repo AbstractSessionRepo
}

func NewSessionInter(repo AbstractSessionRepo) *SessionInter {
	return &SessionInter{repo: repo}
}

func (i *SessionInter) Create(sessions []domain.Session) ([]domain.Session, error) {
	var err error

	for k := range sessions {
		err = i.BeforeCreate(&sessions[k])
		if err != nil {
			return nil, err
		}
	}

	sessions, err = i.repo.Create(sessions)
	if err != nil {
		return nil, err
	}

	for k := range sessions {
		err = i.AfterCreate(&sessions[k])
		if err != nil {
			return nil, err
		}
	}

	return sessions, nil
}

func (i *SessionInter) CreateOne(session *domain.Session) (*domain.Session, error) {
	err := i.BeforeCreate(session)
	if err != nil {
		return nil, err
	}

	session, err = i.repo.CreateOne(session)
	if err != nil {
		return nil, err
	}

	err = i.AfterCreate(session)
	if err != nil {
		return nil, err
	}

	return session, nil
}

func (i *SessionInter) Find(filter *usecases.Filter, ownerRelations []domain.Relation) ([]domain.Session, error) {
	sessions, err := i.repo.Find(filter, ownerRelations)
	if err != nil {
		return nil, err
	}

	return sessions, nil
}

func (i *SessionInter) FindByID(id int, filter *usecases.Filter, ownerRelations []domain.Relation) (*domain.Session, error) {
	session, err := i.repo.FindByID(id, filter, ownerRelations)
	if err != nil {
		return nil, err
	}

	return session, nil
}

func (i *SessionInter) Upsert(sessions []domain.Session, filter *usecases.Filter, ownerRelations []domain.Relation) ([]domain.Session, error) {
	sessionsToUpdate := []domain.Session{}
	sessionsToCreate := []domain.Session{}

	for k := range sessions {
		var err error

		if sessions[k].ID != 0 {
			err = i.BeforeUpdate(&sessions[k])
			sessionsToUpdate = append(sessionsToUpdate, sessions[k])
		} else {
			err = i.BeforeCreate(&sessions[k])
			sessionsToCreate = append(sessionsToCreate, sessions[k])
		}

		if err != nil {
			return nil, err
		}
	}

	sessionsToUpdate, err := i.repo.Update(sessionsToUpdate, filter, ownerRelations)
	if err != nil {
		return nil, err
	}

	sessionsToCreate, err = i.repo.Create(sessionsToCreate)
	if err != nil {
		return nil, err
	}

	for k := range sessionsToUpdate {
		err = i.AfterUpdate(&sessions[k])
		if err != nil {
			return nil, err
		}
	}

	for k := range sessionsToCreate {
		err = i.AfterCreate(&sessions[k])
		if err != nil {
			return nil, err
		}
	}

	return append(sessionsToUpdate, sessionsToCreate...), nil
}

func (i *SessionInter) UpsertOne(session *domain.Session, filter *usecases.Filter, ownerRelations []domain.Relation) (*domain.Session, error) {
	if session.ID != 0 {
		err := i.BeforeUpdate(session)
		if err != nil {
			return nil, err
		}

		session, err = i.repo.UpdateByID(session.ID, session, filter, ownerRelations)
		if err != nil {
			return nil, err
		}

		err = i.AfterUpdate(session)
		if err != nil {
			return nil, err
		}
	} else {
		err := i.BeforeCreate(session)
		if err != nil {
			return nil, err
		}

		session, err = i.repo.CreateOne(session)
		if err != nil {
			return nil, err
		}

		err = i.AfterCreate(session)
		if err != nil {
			return nil, err
		}
	}

	return session, nil
}

func (i *SessionInter) UpdateByID(id int, session *domain.Session,
	filter *usecases.Filter, ownerRelations []domain.Relation) (*domain.Session, error) {

	err := i.BeforeUpdate(session)
	if err != nil {
		return nil, err
	}

	session, err = i.repo.UpdateByID(id, session, filter, ownerRelations)
	if err != nil {
		return nil, err
	}

	err = i.AfterUpdate(session)
	if err != nil {
		return nil, err
	}

	return session, nil
}

func (i *SessionInter) DeleteAll(filter *usecases.Filter, ownerRelations []domain.Relation) error {
	sessions, err := i.repo.Find(filter, ownerRelations)
	if err != nil {
		return err
	}

	for k := range sessions {
		err = i.BeforeDelete(&sessions[k])
		if err != nil {
			return err
		}
	}

	err = i.repo.DeleteAll(filter, ownerRelations)
	if err != nil {
		return err
	}

	for k := range sessions {
		err = i.AfterDelete(&sessions[k])
		if err != nil {
			return err
		}
	}

	return nil
}

func (i *SessionInter) DeleteByID(id int, filter *usecases.Filter, ownerRelations []domain.Relation) error {
	session, err := i.repo.FindByID(id, filter, ownerRelations)
	if err != nil {
		return err
	}

	err = i.BeforeDelete(session)
	if err != nil {
		return err
	}

	err = i.repo.DeleteByID(id, filter, ownerRelations)
	if err != nil {
		return err
	}

	err = i.AfterDelete(session)
	if err != nil {
		return err
	}

	return nil
}
