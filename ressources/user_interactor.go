// Generated by: main
// TypeWriter: interactor
// Directive: +gen on User

package ressources

import (
	"github.com/Solher/auth-scaffold/domain"
	"github.com/Solher/auth-scaffold/interfaces"
	"golang.org/x/crypto/bcrypt"
)

type AbstractUserRepo interface {
	Create(users []domain.User) ([]domain.User, error)
	CreateOne(user *domain.User) (*domain.User, error)
	Find(filter *interfaces.Filter, ownerRelations []domain.Relation) ([]domain.User, error)
	FindByID(id int, filter *interfaces.Filter, ownerRelations []domain.Relation) (*domain.User, error)
	Upsert(users []domain.User, filter *interfaces.Filter, ownerRelations []domain.Relation) ([]domain.User, error)
	UpsertOne(user *domain.User, filter *interfaces.Filter, ownerRelations []domain.Relation) (*domain.User, error)
	UpdateByID(id int, session *domain.User, filter *interfaces.Filter, ownerRelations []domain.Relation) (*domain.User, error)
	DeleteAll(filter *interfaces.Filter, ownerRelations []domain.Relation) error
	DeleteByID(id int, filter *interfaces.Filter, ownerRelations []domain.Relation) error
}

type UserInter struct {
	repo AbstractUserRepo
}

func NewUserInter(repo AbstractUserRepo) *UserInter {
	return &UserInter{repo: repo}
}

func (i *UserInter) Create(users []domain.User) ([]domain.User, error) {
	for i := range users {
		if users[i].Password != "" {
			hashedPassword, err := bcrypt.GenerateFromPassword([]byte(users[i].Password), 0)
			if err != nil {
				return nil, err
			}

			users[i].Password = string(hashedPassword)
		}
	}

	users, err := i.repo.Create(users)
	return users, err
}

func (i *UserInter) CreateOne(user *domain.User) (*domain.User, error) {
	if user.Password != "" {
		hashedPassword, err := bcrypt.GenerateFromPassword([]byte(user.Password), 0)
		if err != nil {
			return nil, err
		}

		user.Password = string(hashedPassword)
	}

	user, err := i.repo.CreateOne(user)
	return user, err
}

func (i *UserInter) Find(filter *interfaces.Filter, ownerRelations []domain.Relation) ([]domain.User, error) {
	users, err := i.repo.Find(filter, ownerRelations)
	return users, err
}

func (i *UserInter) FindByID(id int, filter *interfaces.Filter, ownerRelations []domain.Relation) (*domain.User, error) {
	user, err := i.repo.FindByID(id, filter, ownerRelations)
	return user, err
}

func (i *UserInter) Upsert(users []domain.User, filter *interfaces.Filter, ownerRelations []domain.Relation) ([]domain.User, error) {
	for i := range users {
		if users[i].Password != "" {
			hashedPassword, err := bcrypt.GenerateFromPassword([]byte(users[i].Password), 0)
			if err != nil {
				return nil, err
			}

			users[i].Password = string(hashedPassword)
		}
	}

	users, err := i.repo.Upsert(users, filter, ownerRelations)
	return users, err
}

func (i *UserInter) UpsertOne(user *domain.User, filter *interfaces.Filter, ownerRelations []domain.Relation) (*domain.User, error) {
	if user.Password != "" {
		hashedPassword, err := bcrypt.GenerateFromPassword([]byte(user.Password), 0)
		if err != nil {
			return nil, err
		}

		user.Password = string(hashedPassword)
	}

	user, err := i.repo.UpsertOne(user, filter, ownerRelations)
	return user, err
}

func (i *UserInter) UpdateByID(id int, user *domain.User,
	filter *interfaces.Filter, ownerRelations []domain.Relation) (*domain.User, error) {

	if user.Password != "" {
		hashedPassword, err := bcrypt.GenerateFromPassword([]byte(user.Password), 0)
		if err != nil {
			return nil, err
		}

		user.Password = string(hashedPassword)
	}

	user, err := i.repo.UpdateByID(id, user, filter, ownerRelations)
	return user, err
}

func (i *UserInter) DeleteAll(filter *interfaces.Filter, ownerRelations []domain.Relation) error {
	err := i.repo.DeleteAll(filter, ownerRelations)
	return err
}

func (i *UserInter) DeleteByID(id int, filter *interfaces.Filter, ownerRelations []domain.Relation) error {
	err := i.repo.DeleteByID(id, filter, ownerRelations)
	return err
}
