// Generated by: main
// TypeWriter: interactor
// Directive: +gen on RoleMapping

package ressources

import (
	"database/sql"
	"time"

	"github.com/Solher/zest/domain"
	"github.com/Solher/zest/usecases"
)

type AbstractRoleMappingRepo interface {
	Create(roleMappings []domain.RoleMapping) ([]domain.RoleMapping, error)
	CreateOne(roleMapping *domain.RoleMapping) (*domain.RoleMapping, error)
	Find(filter *usecases.Filter, ownerRelations []domain.Relation) ([]domain.RoleMapping, error)
	FindByID(id int, filter *usecases.Filter, ownerRelations []domain.Relation) (*domain.RoleMapping, error)
	Update(roleMappings []domain.RoleMapping, filter *usecases.Filter, ownerRelations []domain.Relation) ([]domain.RoleMapping, error)
	UpdateByID(id int, roleMapping *domain.RoleMapping, filter *usecases.Filter, ownerRelations []domain.Relation) (*domain.RoleMapping, error)
	DeleteAll(filter *usecases.Filter, ownerRelations []domain.Relation) error
	DeleteByID(id int, filter *usecases.Filter, ownerRelations []domain.Relation) error
	Raw(query string, values ...interface{}) (*sql.Rows, error)
}

type RoleMappingInter struct {
	repo                 AbstractRoleMappingRepo
	permissionCacheInter usecases.AbstractPermissionCacheInter
}

func NewRoleMappingInter(repo AbstractRoleMappingRepo) *RoleMappingInter {
	return &RoleMappingInter{repo: repo}
}

func (i *RoleMappingInter) BeforeSave(roleMapping *domain.RoleMapping) error {
	roleMapping.ID = 0
	roleMapping.CreatedAt = time.Time{}
	roleMapping.UpdatedAt = time.Time{}

	err := roleMapping.ScopeModel()
	if err != nil {
		return err
	}

	return nil
}

func (i *RoleMappingInter) AfterModification(roleMapping *domain.RoleMapping) error {
	err := i.permissionCacheInter.RefreshRole(roleMapping.AccountID)
	if err != nil {
		return err
	}

	return nil
}

func (i *RoleMappingInter) Create(roleMappings []domain.RoleMapping) ([]domain.RoleMapping, error) {
	var err error

	for k := range roleMappings {
		err := i.BeforeSave(&roleMappings[k])
		if err != nil {
			return nil, err
		}
	}

	roleMappings, err = i.repo.Create(roleMappings)
	if err != nil {
		return nil, err
	}

	for k := range roleMappings {
		err := i.AfterModification(&roleMappings[k])
		if err != nil {
			return nil, err
		}
	}

	return roleMappings, nil
}

func (i *RoleMappingInter) CreateOne(roleMapping *domain.RoleMapping) (*domain.RoleMapping, error) {
	err := i.BeforeSave(roleMapping)
	if err != nil {
		return nil, err
	}

	roleMapping, err = i.repo.CreateOne(roleMapping)
	if err != nil {
		return nil, err
	}

	err = i.AfterModification(roleMapping)
	if err != nil {
		return nil, err
	}

	return roleMapping, nil
}

func (i *RoleMappingInter) Find(filter *usecases.Filter, ownerRelations []domain.Relation) ([]domain.RoleMapping, error) {
	roleMappings, err := i.repo.Find(filter, ownerRelations)
	if err != nil {
		return nil, err
	}

	return roleMappings, nil
}

func (i *RoleMappingInter) FindByID(id int, filter *usecases.Filter, ownerRelations []domain.Relation) (*domain.RoleMapping, error) {
	roleMapping, err := i.repo.FindByID(id, filter, ownerRelations)
	if err != nil {
		return nil, err
	}

	return roleMapping, nil
}

func (i *RoleMappingInter) Upsert(roleMappings []domain.RoleMapping, filter *usecases.Filter, ownerRelations []domain.Relation) ([]domain.RoleMapping, error) {
	roleMappingsToUpdate := []domain.RoleMapping{}
	roleMappingsToCreate := []domain.RoleMapping{}

	for k := range roleMappings {
		err := i.BeforeSave(&roleMappings[k])
		if err != nil {
			return nil, err
		}

		if roleMappings[k].ID != 0 {
			roleMappingsToUpdate = append(roleMappingsToUpdate, roleMappings[k])
		} else {
			roleMappingsToCreate = append(roleMappingsToCreate, roleMappings[k])
		}
	}

	roleMappingsToUpdate, err := i.repo.Update(roleMappingsToUpdate, filter, ownerRelations)
	if err != nil {
		return nil, err
	}

	roleMappingsToCreate, err = i.repo.Create(roleMappingsToCreate)
	if err != nil {
		return nil, err
	}

	roleMappings = append(roleMappingsToUpdate, roleMappingsToCreate...)

	for k := range roleMappings {
		err := i.AfterModification(&roleMappings[k])
		if err != nil {
			return nil, err
		}
	}

	return roleMappings, nil
}

func (i *RoleMappingInter) UpsertOne(roleMapping *domain.RoleMapping, filter *usecases.Filter, ownerRelations []domain.Relation) (*domain.RoleMapping, error) {
	err := i.BeforeSave(roleMapping)
	if err != nil {
		return nil, err
	}

	if roleMapping.ID != 0 {
		roleMapping, err = i.repo.UpdateByID(roleMapping.ID, roleMapping, filter, ownerRelations)
	} else {
		roleMapping, err = i.repo.CreateOne(roleMapping)
	}

	if err != nil {
		return nil, err
	}

	err = i.AfterModification(roleMapping)
	if err != nil {
		return nil, err
	}

	return roleMapping, nil
}

func (i *RoleMappingInter) UpdateByID(id int, roleMapping *domain.RoleMapping,
	filter *usecases.Filter, ownerRelations []domain.Relation) (*domain.RoleMapping, error) {

	err := i.BeforeSave(roleMapping)
	if err != nil {
		return nil, err
	}

	roleMapping, err = i.repo.UpdateByID(id, roleMapping, filter, ownerRelations)
	if err != nil {
		return nil, err
	}

	err = i.AfterModification(roleMapping)
	if err != nil {
		return nil, err
	}

	return roleMapping, nil
}

func (i *RoleMappingInter) DeleteAll(filter *usecases.Filter, ownerRelations []domain.Relation) error {
	filter.Fields = nil

	roleMappings, err := i.repo.Find(filter, ownerRelations)
	if err != nil {
		return err
	}

	err = i.repo.DeleteAll(filter, ownerRelations)
	if err != nil {
		return err
	}

	for k := range roleMappings {
		err := i.AfterModification(&roleMappings[k])
		if err != nil {
			return err
		}
	}

	return nil
}

func (i *RoleMappingInter) DeleteByID(id int, filter *usecases.Filter, ownerRelations []domain.Relation) error {
	filter.Fields = nil

	roleMapping, err := i.repo.FindByID(id, filter, ownerRelations)
	if err != nil {
		return err
	}

	err = i.repo.DeleteByID(id, filter, ownerRelations)
	if err != nil {
		return err
	}

	err = i.AfterModification(roleMapping)
	if err != nil {
		return err
	}

	return nil
}
