// Generated by: main
// TypeWriter: repository
// Directive: +gen on Session

package sessions

import "github.com/Solher/auth-scaffold/interfaces"

type Repository struct {
	store interfaces.GormStore
}

func NewRepository(store interfaces.GormStore) *Repository {
	return &Repository{store: store}
}

func (r *Repository) Create(sessions []Session) ([]Session, error) {
	db := r.store.GetDB()
	transaction := db.Begin()

	for i, session := range sessions {
		err := db.Create(&session).Error
		if err != nil {
			transaction.Rollback()
			return nil, err
		}

		sessions[i] = session
	}

	transaction.Commit()
	return sessions, nil
}

func (r *Repository) Find(filter *interfaces.Filter) ([]Session, error) {
	query, err := r.store.BuildQuery(filter)
	if err != nil {
		return nil, err
	}

	sessions := []Session{}

	err = query.Find(&sessions).Error
	if err != nil {
		return nil, err
	}

	return sessions, nil
}

func (r *Repository) FindByID(id int, filter *interfaces.Filter) (*Session, error) {
	query, err := r.store.BuildQuery(filter)
	if err != nil {
		return nil, err
	}

	session := Session{}

	err = query.First(&session, id).Error
	if err != nil {
		return nil, err
	}

	return &session, nil
}

func (r *Repository) Upsert(sessions []Session) ([]Session, error) {
	db := r.store.GetDB()
	transaction := db.Begin()

	for i, session := range sessions {
		if session.ID != 0 {
			oldUser := Session{}

			err := db.First(&oldUser, session.ID).Updates(session).Error
			if err != nil {
				transaction.Rollback()
				return nil, err
			}
		} else {
			err := db.Create(&session).Error
			if err != nil {
				transaction.Rollback()
				return nil, err
			}
		}

		sessions[i] = session
	}

	transaction.Commit()
	return sessions, nil
}

func (r *Repository) DeleteAll(filter *interfaces.Filter) error {
	query, err := r.store.BuildQuery(filter)
	if err != nil {
		return err
	}

	err = query.Delete(Session{}).Error
	if err != nil {
		return err
	}

	return nil
}

func (r *Repository) DeleteByID(id int) error {
	db := r.store.GetDB()

	err := db.Delete(&Session{ID: id}).Error
	if err != nil {
		return err
	}

	return nil
}
