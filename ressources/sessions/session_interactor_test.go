// Generated by: main
// TypeWriter: interactor_test
// Directive: +gen on Session

package sessions

import (
	"testing"

	"github.com/Solher/auth-scaffold/interfaces"
	. "github.com/smartystreets/goconvey/convey"
)

type stubRepository struct{}

func (r *stubRepository) Create(sessions []Session) ([]Session, error) {
	return sessions, nil
}

func (r *stubRepository) Find(filter *interfaces.Filter) ([]Session, error) {
	return []Session{}, nil
}

func (r *stubRepository) FindByID(id int, filter *interfaces.Filter) (*Session, error) {
	return &Session{}, nil
}

func (r *stubRepository) Upsert(sessions []Session) ([]Session, error) {
	return sessions, nil
}

func (r *stubRepository) DeleteAll(filter *interfaces.Filter) error {
	return nil
}

func (r *stubRepository) DeleteByID(id int) error {
	return nil
}

func TestInteractor(t *testing.T) {
	repo := &stubRepository{}
	interactor := NewInteractor(repo)

	Convey("Testing sessions interactor...", t, func() {
		Convey("Should be able to create sessions.", func() {
			sessions := []Session{}
			_, err := interactor.Create(sessions)

			So(err, ShouldBeNil)
		})

		Convey("Should be able to find sessions.", func() {
			_, err := interactor.Find(nil)

			So(err, ShouldBeNil)
		})

		Convey("Should be able to find a session by id.", func() {
			_, err := interactor.FindByID(1, nil)

			So(err, ShouldBeNil)
		})

		Convey("Should be able to upsert sessions.", func() {
			sessions := []Session{}
			_, err := interactor.Upsert(sessions)

			So(err, ShouldBeNil)
		})

		Convey("Should be able to delete sessions.", func() {
			err := interactor.DeleteAll(nil)
			So(err, ShouldBeNil)
		})

		Convey("Should be able to delete a session by id.", func() {
			err := interactor.DeleteByID(1)
			So(err, ShouldBeNil)
		})
	})
}
