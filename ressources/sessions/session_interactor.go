// Generated by: main
// TypeWriter: interactor
// Directive: +gen on Session

package sessions

import (
	"time"

	"github.com/Solher/auth-scaffold/interfaces"
	"github.com/Solher/auth-scaffold/ressources/users"
)

type SessionRepository interface {
	Create(sessions []Session) ([]Session, error)
	Find(filter *interfaces.Filter) ([]Session, error)
	FindByID(id int, filter *interfaces.Filter) (*Session, error)
	Upsert(sessions []Session) ([]Session, error)
	DeleteAll(filter *interfaces.Filter) error
	DeleteByID(id int) error
}

type Interactor struct {
	repo SessionRepository
}

func NewInteractor(repo SessionRepository) *Interactor {
	return &Interactor{repo: repo}
}

func (i *Interactor) Create(sessions []Session) ([]Session, error) {
	sessions, err := i.repo.Create(sessions)
	return sessions, err
}

func (i *Interactor) Find(filter *interfaces.Filter) ([]Session, error) {
	sessions, err := i.repo.Find(filter)
	return sessions, err
}

func (i *Interactor) FindByID(id int, filter *interfaces.Filter) (*Session, error) {
	session, err := i.repo.FindByID(id, filter)
	return session, err
}

func (i *Interactor) Upsert(sessions []Session) ([]Session, error) {
	sessions, err := i.repo.Upsert(sessions)
	return sessions, err
}

func (i *Interactor) DeleteAll(filter *interfaces.Filter) error {
	err := i.repo.DeleteAll(filter)
	return err
}

func (i *Interactor) DeleteByID(id int) error {
	err := i.repo.DeleteByID(id)
	return err
}

func (i *Interactor) CurrentSession(authToken string) (*Session, *users.User, error) {
	filter := &interfaces.Filter{
		Limit:   1,
		Where:   map[string]interface{}{"authToken": authToken},
		Include: []interface{}{"user"},
	}

	sessions, err := i.repo.Find(filter)
	if err != nil {
		return nil, nil, err
	}

	if len(sessions) == 1 {
		session := sessions[0]

		if session.ValidTo.After(time.Now()) {
			user := &session.User
			session.User = users.User{}
			return &session, user, nil
		}
	}

	return nil, nil, nil
}
