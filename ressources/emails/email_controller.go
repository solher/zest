// Generated by: main
// TypeWriter: controller
// Directive: +gen on Email

package emails

import (
	"encoding/json"
	"net/http"
	"strconv"

	"github.com/Solher/auth-scaffold/apierrors"
	"github.com/Solher/auth-scaffold/interfaces"
	"github.com/julienschmidt/httprouter"
)

type EmailInteractor interface {
	Create(emails []Email) ([]Email, error)
	Find(filter *interfaces.Filter) ([]Email, error)
	FindByID(id int, filter *interfaces.Filter) (*Email, error)
	Upsert(emails []Email) ([]Email, error)
	DeleteAll(filter *interfaces.Filter) error
	DeleteByID(id int) error
}

type Controller struct {
	interactor EmailInteractor
	render     interfaces.Render
}

func NewController(interactor EmailInteractor, render interfaces.Render, routesDir interfaces.RouteDirectory) *Controller {
	controller := &Controller{interactor: interactor, render: render}

	if routesDir != nil {
		addRoutes(routesDir, controller)
	}

	return controller
}

func (c *Controller) Create(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {
	var emails []Email
	err := json.NewDecoder(r.Body).Decode(&emails)
	if err != nil {
		c.render.JSONError(w, http.StatusBadRequest, apierrors.BodyDecodingError, err)
		return
	}

	emails, err = c.interactor.Create(emails)
	if err != nil {
		c.render.JSONError(w, http.StatusInternalServerError, apierrors.InternalServerError, err)
		return
	}

	c.render.JSON(w, http.StatusCreated, emails)
}

func (c *Controller) Find(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {
	filter, err := interfaces.GetQueryFilter(r)
	if err != nil {
		c.render.JSONError(w, http.StatusBadRequest, apierrors.FilterDecodingError, err)
		return
	}

	emails, err := c.interactor.Find(filter)
	if err != nil {
		c.render.JSONError(w, http.StatusInternalServerError, apierrors.InternalServerError, err)
		return
	}

	c.render.JSON(w, http.StatusOK, emails)
}

func (c *Controller) FindByID(w http.ResponseWriter, r *http.Request, params httprouter.Params) {
	id, err := strconv.Atoi(params.ByName("id"))
	if err != nil {
		c.render.JSONError(w, http.StatusBadRequest, apierrors.InvalidPathParams, err)
		return
	}

	filter, err := interfaces.GetQueryFilter(r)
	if err != nil {
		c.render.JSONError(w, http.StatusBadRequest, apierrors.FilterDecodingError, err)
		return
	}

	email, err := c.interactor.FindByID(id, filter)
	if err != nil {
		c.render.JSONError(w, http.StatusUnauthorized, apierrors.Unauthorized, err)
		return
	}

	c.render.JSON(w, http.StatusOK, email)
}

func (c *Controller) Upsert(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {
	var emails []Email
	err := json.NewDecoder(r.Body).Decode(&emails)
	if err != nil {
		c.render.JSONError(w, http.StatusBadRequest, apierrors.BodyDecodingError, err)
		return
	}

	emails, err = c.interactor.Upsert(emails)
	if err != nil {
		c.render.JSONError(w, http.StatusInternalServerError, apierrors.InternalServerError, err)
		return
	}

	c.render.JSON(w, http.StatusCreated, emails)
}

func (c *Controller) DeleteAll(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {
	filter, err := interfaces.GetQueryFilter(r)
	if err != nil {
		c.render.JSONError(w, http.StatusBadRequest, apierrors.FilterDecodingError, err)
		return
	}

	err = c.interactor.DeleteAll(filter)
	if err != nil {
		c.render.JSONError(w, http.StatusInternalServerError, apierrors.InternalServerError, err)
		return
	}

	c.render.JSON(w, http.StatusNoContent, nil)
}

func (c *Controller) DeleteByID(w http.ResponseWriter, r *http.Request, params httprouter.Params) {
	id, err := strconv.Atoi(params.ByName("id"))
	if err != nil {
		c.render.JSONError(w, http.StatusBadRequest, apierrors.InvalidPathParams, err)
		return
	}

	err = c.interactor.DeleteByID(id)
	if err != nil {
		c.render.JSONError(w, http.StatusUnauthorized, apierrors.Unauthorized, err)
		return
	}

	c.render.JSON(w, http.StatusNoContent, nil)
}
