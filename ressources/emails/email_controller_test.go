// Generated by: main
// TypeWriter: controller_test
// Directive: +gen on Email

package emails

import (
	"errors"
	"net/http"
	"testing"

	"github.com/Solher/auth-scaffold/apierrors"
	"github.com/Solher/auth-scaffold/infrastructure"
	"github.com/Solher/auth-scaffold/interfaces"
	"github.com/Solher/auth-scaffold/utils"
	"github.com/julienschmidt/httprouter"
	. "github.com/smartystreets/goconvey/convey"
	"github.com/unrolled/render"
)

type stubRender struct {
	renderer *render.Render
}

func newStubRender() *stubRender {
	return &stubRender{renderer: render.New()}
}

func (r *stubRender) JSONError(w http.ResponseWriter, status int, apiError *apierrors.APIError, err error) {
	r.renderer.JSON(w, status, apierrors.Make(*apiError, status, err))
}

func (r *stubRender) JSON(w http.ResponseWriter, status int, object interface{}) {
	r.renderer.JSON(w, status, object)
}

type stubInteractor struct {
	ThrowErrors bool
}

func (i *stubInteractor) Create(emails []Email) ([]Email, error) {
	if i.ThrowErrors {
		return nil, errors.New("error")
	}

	for i := range emails {
		emails[i].ID = i + 1
	}

	return emails, nil
}

func (i *stubInteractor) Find(filter *interfaces.Filter) ([]Email, error) {
	emails := []Email{
		{
			FirstName: "Fabien",
			LastName:  "Herfray",
		},
		{
			FirstName: "Thomas",
			LastName:  "Hourlier",
		},
	}

	if i.ThrowErrors {
		return nil, errors.New("error")
	}

	return emails, nil
}

func (i *stubInteractor) FindByID(id int, filter *interfaces.Filter) (*Email, error) {
	emails := []Email{
		{
			FirstName: "Fabien",
			LastName:  "Herfray",
		},
	}

	if i.ThrowErrors || id-1 > 0 {
		return nil, errors.New("error")
	}

	return &emails[id-1], nil
}

func (i *stubInteractor) Upsert(emails []Email) ([]Email, error) {
	if i.ThrowErrors {
		return nil, errors.New("error")
	}

	for i := range emails {
		if emails[i].ID == 0 {
			switch {
			case emails[i-1].ID != 0:
				emails[i].ID = emails[i-1].ID
			default:
				emails[i].ID = i + 1
			}
		}
	}

	return emails, nil
}

func (i *stubInteractor) DeleteAll(filter *interfaces.Filter) error {
	if i.ThrowErrors {
		return errors.New("error")
	}

	return nil
}

func (i *stubInteractor) DeleteByID(id int) error {
	if i.ThrowErrors {
		return errors.New("error")
	}

	return nil
}

func TestController(t *testing.T) {
	interactor := &stubInteractor{}
	render := infrastructure.NewRender()
	routes := interfaces.NewRouteDirectory()

	controller := NewController(interactor, render, routes)
	key := interfaces.NewDirectoryKey(controller)

	Convey("Testing emails controller...", t, func() {
		emails := []Email{
			{
				FirstName: "Fabien",
				LastName:  "Herfray",
			},
			{
				FirstName: "Thomas",
				LastName:  "Hourlier",
			},
		}

		interactor.ThrowErrors = false

		Convey("Should be able to create emails.", func() {
			route := routes[key.For("Create")]
			res := interfaces.MockHTTPRequest(route, utils.MarshalToStr(emails), "", nil)
			utils.Unmarshal(res, &emails)

			So(emails[0].ID, ShouldNotEqual, 0)
			So(emails[1].ID, ShouldNotEqual, 0)

			res = interfaces.MockHTTPRequest(route, "string", "", nil)
			So(interfaces.GetErrorCode(res), ShouldEqual, apierrors.BodyDecodingError.ErrorCode)

			res = interfaces.MockHTTPRequest(route, "", "", nil)
			So(interfaces.GetErrorCode(res), ShouldEqual, apierrors.BodyDecodingError.ErrorCode)

			interactor.ThrowErrors = true

			res = interfaces.MockHTTPRequest(route, utils.MarshalToStr(emails), "", nil)
			So(interfaces.GetErrorCode(res), ShouldEqual, apierrors.InternalServerError.ErrorCode)
		})

		Convey("Should be able to find emails.", func() {
			route := routes[key.For("Find")]

			res := interfaces.MockHTTPRequest(route, "", "", nil)
			So(res, ShouldEqual, utils.MarshalToStr(emails))

			res = interfaces.MockHTTPRequest(route, "", "toto", nil)
			So(interfaces.GetErrorCode(res), ShouldEqual, apierrors.FilterDecodingError.ErrorCode)

			res = interfaces.MockHTTPRequest(route, "", "{\"limit\": 1}", nil)
			So(interfaces.GetErrorCode(res), ShouldNotEqual, apierrors.FilterDecodingError.ErrorCode)

			interactor.ThrowErrors = true

			res = interfaces.MockHTTPRequest(route, "", "", nil)
			So(interfaces.GetErrorCode(res), ShouldEqual, apierrors.InternalServerError.ErrorCode)
		})

		Convey("Should be able to find email by id.", func() {
			route := routes[key.For("FindByID")]

			params := httprouter.Params{
				{
					Key:   "id",
					Value: "1",
				},
			}

			res := interfaces.MockHTTPRequest(route, "", "", params)
			So(res, ShouldEqual, utils.MarshalToStr(emails[0]))

			params[0].Value = "2"
			res = interfaces.MockHTTPRequest(route, "", "", params)
			So(interfaces.GetErrorCode(res), ShouldEqual, apierrors.Unauthorized.ErrorCode)

			params[0].Value = ""
			res = interfaces.MockHTTPRequest(route, "", "", params)
			So(interfaces.GetErrorCode(res), ShouldEqual, apierrors.InvalidPathParams.ErrorCode)

			params[0].Value = "toto"
			res = interfaces.MockHTTPRequest(route, "", "", params)
			So(interfaces.GetErrorCode(res), ShouldEqual, apierrors.InvalidPathParams.ErrorCode)

			interactor.ThrowErrors = true

			params[0].Value = "1"
			res = interfaces.MockHTTPRequest(route, "", "", params)
			So(interfaces.GetErrorCode(res), ShouldEqual, apierrors.Unauthorized.ErrorCode)
		})

		Convey("Should be able to upsert emails.", func() {
			route := routes[key.For("Upsert")]
			emails[0].ID = 3

			res := interfaces.MockHTTPRequest(route, utils.MarshalToStr(emails), "", nil)
			utils.Unmarshal(res, &emails)

			So(emails[0].ID, ShouldEqual, 3)
			So(emails[1].ID, ShouldNotEqual, 0)

			res = interfaces.MockHTTPRequest(route, "string", "", nil)
			So(interfaces.GetErrorCode(res), ShouldEqual, apierrors.BodyDecodingError.ErrorCode)

			res = interfaces.MockHTTPRequest(route, "", "", nil)
			So(interfaces.GetErrorCode(res), ShouldEqual, apierrors.BodyDecodingError.ErrorCode)

			interactor.ThrowErrors = true

			res = interfaces.MockHTTPRequest(route, utils.MarshalToStr(emails), "", nil)
			So(interfaces.GetErrorCode(res), ShouldEqual, apierrors.InternalServerError.ErrorCode)
		})

		Convey("Should be able to delete emails.", func() {
			route := routes[key.For("DeleteAll")]

			res := interfaces.MockHTTPRequest(route, utils.MarshalToStr(emails), "", nil)
			So(res, ShouldEqual, "null")

			res = interfaces.MockHTTPRequest(route, "", "toto", nil)
			So(interfaces.GetErrorCode(res), ShouldEqual, apierrors.FilterDecodingError.ErrorCode)

			res = interfaces.MockHTTPRequest(route, "", "{\"limit\": 1}", nil)
			So(interfaces.GetErrorCode(res), ShouldNotEqual, apierrors.FilterDecodingError.ErrorCode)

			interactor.ThrowErrors = true

			res = interfaces.MockHTTPRequest(route, utils.MarshalToStr(emails), "", nil)
			So(interfaces.GetErrorCode(res), ShouldEqual, apierrors.InternalServerError.ErrorCode)
		})

		Convey("Should be able to delete email by id.", func() {
			route := routes[key.For("DeleteByID")]

			params := httprouter.Params{
				{
					Key:   "id",
					Value: "1",
				},
			}

			res := interfaces.MockHTTPRequest(route, "", "", params)
			So(res, ShouldEqual, "null")

			params[0].Value = "2"
			res = interfaces.MockHTTPRequest(route, "", "", params)
			So(res, ShouldEqual, "null")

			params[0].Value = ""
			res = interfaces.MockHTTPRequest(route, "", "", params)
			So(interfaces.GetErrorCode(res), ShouldEqual, apierrors.InvalidPathParams.ErrorCode)

			params[0].Value = "toto"
			res = interfaces.MockHTTPRequest(route, "", "", params)
			So(interfaces.GetErrorCode(res), ShouldEqual, apierrors.InvalidPathParams.ErrorCode)

			interactor.ThrowErrors = true

			params[0].Value = "1"
			res = interfaces.MockHTTPRequest(route, "", "", params)
			So(interfaces.GetErrorCode(res), ShouldEqual, apierrors.Unauthorized.ErrorCode)
		})
	})
}
