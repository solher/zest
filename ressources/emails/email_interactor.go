// Generated by: main
// TypeWriter: interactor
// Directive: +gen on Email

package emails

import "github.com/Solher/auth-scaffold/interfaces"

type EmailRepository interface {
	Create(emails []Email) ([]Email, error)
	Find(filter *interfaces.Filter) ([]Email, error)
	FindByID(id int, filter *interfaces.Filter) (*Email, error)
	Upsert(emails []Email) ([]Email, error)
	DeleteAll(filter *interfaces.Filter) error
	DeleteByID(id int) error
}

type Interactor struct {
	repo EmailRepository
}

func NewInteractor(repo EmailRepository) *Interactor {
	return &Interactor{repo: repo}
}

func (i *Interactor) Create(emails []Email) ([]Email, error) {
	emails, err := i.repo.Create(emails)
	return emails, err
}

func (i *Interactor) Find(filter *interfaces.Filter) ([]Email, error) {
	emails, err := i.repo.Find(filter)
	return emails, err
}

func (i *Interactor) FindByID(id int, filter *interfaces.Filter) (*Email, error) {
	email, err := i.repo.FindByID(id, filter)
	return email, err
}

func (i *Interactor) Upsert(emails []Email) ([]Email, error) {
	emails, err := i.repo.Upsert(emails)
	return emails, err
}

func (i *Interactor) DeleteAll(filter *interfaces.Filter) error {
	err := i.repo.DeleteAll(filter)
	return err
}

func (i *Interactor) DeleteByID(id int) error {
	err := i.repo.DeleteByID(id)
	return err
}
