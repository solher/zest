// Generated by: main
// TypeWriter: repository
// Directive: +gen on User

package ressources

import (
	"strings"

	"github.com/Solher/auth-scaffold/domain"
	"github.com/Solher/auth-scaffold/interfaces"
	"github.com/Solher/auth-scaffold/internalerrors"
)

type UserRepo struct {
	store interfaces.AbstractGormStore
}

func NewUserRepo(store interfaces.AbstractGormStore) *UserRepo {
	return &UserRepo{store: store}
}

func (r *UserRepo) Create(users []domain.User) ([]domain.User, error) {
	db := r.store.GetDB()
	transaction := db.Begin()

	for i, user := range users {
		err := db.Create(&user).Error
		if err != nil {
			transaction.Rollback()

			if strings.Contains(err.Error(), "constraint") {
				return nil, internalerrors.NewViolatedConstraint(err.Error())
			} else {
				return nil, internalerrors.DatabaseError
			}
		}

		users[i] = user
	}

	transaction.Commit()
	return users, nil
}

func (r *UserRepo) CreateOne(user *domain.User) (*domain.User, error) {
	db := r.store.GetDB()

	err := db.Create(user).Error
	if err != nil {
		if strings.Contains(err.Error(), "constraint") {
			return nil, internalerrors.NewViolatedConstraint(err.Error())
		} else {
			return nil, internalerrors.DatabaseError
		}
	}

	return user, nil
}

func (r *UserRepo) Find(filter *interfaces.Filter) ([]domain.User, error) {
	query, err := r.store.BuildQuery(filter)
	if err != nil {
		return nil, internalerrors.DatabaseError
	}

	users := []domain.User{}

	err = query.Find(&users).Error
	if err != nil {
		return nil, internalerrors.DatabaseError
	}

	return users, nil
}

func (r *UserRepo) FindByID(id int, filter *interfaces.Filter) (*domain.User, error) {
	query, err := r.store.BuildQuery(filter)
	if err != nil {
		return nil, internalerrors.DatabaseError
	}

	user := domain.User{}

	err = query.First(&user, id).Error
	if err != nil {
		return nil, internalerrors.DatabaseError
	}

	return &user, nil
}

func (r *UserRepo) Upsert(users []domain.User) ([]domain.User, error) {
	db := r.store.GetDB()
	transaction := db.Begin()

	for i, user := range users {
		if user.ID != 0 {
			oldUser := domain.User{}

			err := db.First(&oldUser, user.ID).Updates(user).Error
			if err != nil {
				transaction.Rollback()

				if strings.Contains(err.Error(), "constraint") {
					return nil, internalerrors.NewViolatedConstraint(err.Error())
				} else {
					return nil, internalerrors.DatabaseError
				}
			}
		} else {
			err := db.Create(&user).Error
			if err != nil {
				transaction.Rollback()

				if strings.Contains(err.Error(), "constraint") {
					return nil, internalerrors.NewViolatedConstraint(err.Error())
				} else {
					return nil, internalerrors.DatabaseError
				}
			}
		}

		users[i] = user
	}

	transaction.Commit()
	return users, nil
}

func (r *UserRepo) UpsertOne(user *domain.User) (*domain.User, error) {
	db := r.store.GetDB()

	if user.ID != 0 {
		oldUser := domain.User{}

		err := db.First(&oldUser, user.ID).Updates(user).Error
		if err != nil {
			if strings.Contains(err.Error(), "constraint") {
				return nil, internalerrors.NewViolatedConstraint(err.Error())
			} else {
				return nil, internalerrors.DatabaseError
			}
		}
	} else {
		err := db.Create(&user).Error
		if err != nil {
			if strings.Contains(err.Error(), "constraint") {
				return nil, internalerrors.NewViolatedConstraint(err.Error())
			} else {
				return nil, internalerrors.DatabaseError
			}
		}
	}

	return user, nil
}

func (r *UserRepo) DeleteAll(filter *interfaces.Filter) error {
	query, err := r.store.BuildQuery(filter)
	if err != nil {
		return internalerrors.DatabaseError
	}

	err = query.Delete(domain.User{}).Error
	if err != nil {
		return internalerrors.DatabaseError
	}

	return nil
}

func (r *UserRepo) DeleteByID(id int) error {
	db := r.store.GetDB()

	err := db.Delete(&domain.User{GormModel: domain.GormModel{ID: id}}).Error
	if err != nil {
		return internalerrors.DatabaseError
	}

	return nil
}
