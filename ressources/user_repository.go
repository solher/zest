// Generated by: main
// TypeWriter: repository
// Directive: +gen on User

package ressources

import (
	"github.com/Solher/auth-scaffold/domain"
	"github.com/Solher/auth-scaffold/interfaces"
)

type UserRepo struct {
	store interfaces.AbstractGormStore
}

func NewUserRepo(store interfaces.AbstractGormStore) *UserRepo {
	return &UserRepo{store: store}
}

func (r *UserRepo) Create(users []User) ([]User, error) {
	db := r.store.GetDB()
	transaction := db.Begin()

	for i, user := range users {
		err := db.Create(&user).Error
		if err != nil {
			transaction.Rollback()
			return nil, err
		}

		users[i] = user
	}

	transaction.Commit()
	return users, nil
}

func (r *UserRepo) CreateOne(user *User) (*User, error) {
	db := r.store.GetDB()

	err := db.Create(user).Error
	if err != nil {
		return nil, err
	}

	return user, nil
}

func (r *UserRepo) Find(filter *interfaces.Filter) ([]User, error) {
	query, err := r.store.BuildQuery(filter)
	if err != nil {
		return nil, err
	}

	users := []User{}

	err = query.Find(&users).Error
	if err != nil {
		return nil, err
	}

	return users, nil
}

func (r *UserRepo) FindByID(id int, filter *interfaces.Filter) (*User, error) {
	query, err := r.store.BuildQuery(filter)
	if err != nil {
		return nil, err
	}

	user := User{}

	err = query.First(&user, id).Error
	if err != nil {
		return nil, err
	}

	return &user, nil
}

func (r *UserRepo) Upsert(users []User) ([]User, error) {
	db := r.store.GetDB()
	transaction := db.Begin()

	for i, user := range users {
		if user.ID != 0 {
			oldUser := User{}

			err := db.First(&oldUser, user.ID).Updates(user).Error
			if err != nil {
				transaction.Rollback()
				return nil, err
			}
		} else {
			err := db.Create(&user).Error
			if err != nil {
				transaction.Rollback()
				return nil, err
			}
		}

		users[i] = user
	}

	transaction.Commit()
	return users, nil
}

func (r *UserRepo) UpsertOne(user *User) (*User, error) {
	db := r.store.GetDB()

	if user.ID != 0 {
		oldUser := User{}

		err := db.First(&oldUser, user.ID).Updates(user).Error
		if err != nil {
			return nil, err
		}
	} else {
		err := db.Create(&user).Error
		if err != nil {
			return nil, err
		}
	}

	return user, nil
}

func (r *UserRepo) DeleteAll(filter *interfaces.Filter) error {
	query, err := r.store.BuildQuery(filter)
	if err != nil {
		return err
	}

	err = query.Delete(User{}).Error
	if err != nil {
		return err
	}

	return nil
}

func (r *UserRepo) DeleteByID(id int) error {
	db := r.store.GetDB()

	err := db.Delete(&User{GormModel: domain.GormModel{ID: id}}).Error
	if err != nil {
		return err
	}

	return nil
}
