// Generated by: main
// TypeWriter: repository
// Directive: +gen on Acl

package ressources

import (
	"database/sql"
	"strings"

	"github.com/solher/zest/domain"
	"github.com/solher/zest/interfaces"
	"github.com/solher/zest/internalerrors"
	"github.com/solher/zest/usecases"
)

func init() {
	usecases.DependencyDirectory.Register(NewAclRepo)
}

type AclRepo struct {
	store interfaces.AbstractGormStore
}

func NewAclRepo(store interfaces.AbstractGormStore) *AclRepo {
	return &AclRepo{store: store}
}

func (r *AclRepo) Create(acls []domain.Acl) ([]domain.Acl, error) {
	db := r.store.GetDB()
	transaction := db.Begin()

	for i, acl := range acls {
		err := db.Create(&acl).Error
		if err != nil {
			transaction.Rollback()

			if strings.Contains(err.Error(), "constraint") {
				return nil, internalerrors.NewViolatedConstraint(err.Error())
			}

			return nil, internalerrors.DatabaseError
		}

		acls[i] = acl
	}

	transaction.Commit()
	return acls, nil
}

func (r *AclRepo) CreateOne(acl *domain.Acl) (*domain.Acl, error) {
	db := r.store.GetDB()

	err := db.Create(acl).Error
	if err != nil {
		if strings.Contains(err.Error(), "constraint") {
			return nil, internalerrors.NewViolatedConstraint(err.Error())
		}

		return nil, internalerrors.DatabaseError
	}

	return acl, nil
}

func (r *AclRepo) Find(context usecases.QueryContext) ([]domain.Acl, error) {
	query, err := r.store.BuildQuery(context.Filter, context.OwnerRelations)
	if err != nil {
		return nil, internalerrors.DatabaseError
	}

	acls := []domain.Acl{}

	err = query.Find(&acls).Error
	if err != nil {
		return nil, internalerrors.DatabaseError
	}

	return acls, nil
}

func (r *AclRepo) FindByID(id int, context usecases.QueryContext) (*domain.Acl, error) {
	query, err := r.store.BuildQuery(context.Filter, context.OwnerRelations)
	if err != nil {
		return nil, internalerrors.DatabaseError
	}

	acl := domain.Acl{}

	err = query.Where("acls.id = ?", id).First(&acl).Error
	if err != nil {
		return nil, internalerrors.DatabaseError
	}

	return &acl, nil
}

func (r *AclRepo) Update(acls []domain.Acl, context usecases.QueryContext) ([]domain.Acl, error) {
	db := r.store.GetDB()
	transaction := db.Begin()

	query, err := r.store.BuildQuery(context.Filter, context.OwnerRelations)
	if err != nil {
		return nil, internalerrors.DatabaseError
	}

	for i, acl := range acls {
		queryCopy := *query
		oldUser := domain.Acl{}

		err := queryCopy.Where("acls.id = ?", acl.ID).First(&oldUser).Updates(acls[i]).Error
		if err != nil {
			transaction.Rollback()

			if strings.Contains(err.Error(), "constraint") {
				return nil, internalerrors.NewViolatedConstraint(err.Error())
			}

			return nil, internalerrors.DatabaseError
		}
	}

	transaction.Commit()
	return acls, nil
}

func (r *AclRepo) UpdateByID(id int, acl *domain.Acl,
	context usecases.QueryContext) (*domain.Acl, error) {

	query, err := r.store.BuildQuery(context.Filter, context.OwnerRelations)
	if err != nil {
		return nil, internalerrors.DatabaseError
	}

	oldUser := domain.Acl{}

	err = query.Where("acls.id = ?", id).First(&oldUser).Updates(acl).Error
	if err != nil {
		if strings.Contains(err.Error(), "constraint") {
			return nil, internalerrors.NewViolatedConstraint(err.Error())
		}

		return nil, internalerrors.DatabaseError
	}

	return acl, nil
}

func (r *AclRepo) DeleteAll(context usecases.QueryContext) error {
	query, err := r.store.BuildQuery(context.Filter, context.OwnerRelations)
	if err != nil {
		return internalerrors.DatabaseError
	}

	err = query.Delete(domain.Acl{}).Error
	if err != nil {
		return internalerrors.DatabaseError
	}

	return nil
}

func (r *AclRepo) DeleteByID(id int, context usecases.QueryContext) error {
	query, err := r.store.BuildQuery(context.Filter, context.OwnerRelations)
	if err != nil {
		return internalerrors.DatabaseError
	}

	err = query.Delete(&domain.Acl{GormModel: domain.GormModel{ID: id}}).Error
	if err != nil {
		return internalerrors.DatabaseError
	}

	return nil
}

func (r *AclRepo) Raw(query string, values ...interface{}) (*sql.Rows, error) {
	db := r.store.GetDB()

	rows, err := db.Raw(query, values...).Rows()
	if err != nil {
		if strings.Contains(err.Error(), "constraint") {
			return nil, internalerrors.NewViolatedConstraint(err.Error())
		}

		return nil, internalerrors.DatabaseError
	}

	return rows, nil
}
