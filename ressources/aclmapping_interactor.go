// Generated by: main
// TypeWriter: interactor
// Directive: +gen on AclMapping

package ressources

import (
	"database/sql"

	"github.com/Solher/zest/domain"
	"github.com/Solher/zest/usecases"
)

type AbstractAclMappingRepo interface {
	Create(aclmappings []domain.AclMapping) ([]domain.AclMapping, error)
	CreateOne(aclmapping *domain.AclMapping) (*domain.AclMapping, error)
	Find(filter *usecases.Filter, ownerRelations []domain.Relation) ([]domain.AclMapping, error)
	FindByID(id int, filter *usecases.Filter, ownerRelations []domain.Relation) (*domain.AclMapping, error)
	Update(aclmappings []domain.AclMapping, filter *usecases.Filter, ownerRelations []domain.Relation) ([]domain.AclMapping, error)
	UpdateByID(id int, aclmapping *domain.AclMapping, filter *usecases.Filter, ownerRelations []domain.Relation) (*domain.AclMapping, error)
	DeleteAll(filter *usecases.Filter, ownerRelations []domain.Relation) error
	DeleteByID(id int, filter *usecases.Filter, ownerRelations []domain.Relation) error
	Raw(query string, values ...interface{}) (*sql.Rows, error)
}

type AclMappingInter struct {
	repo AbstractAclMappingRepo
}

func NewAclMappingInter(repo AbstractAclMappingRepo) *AclMappingInter {
	return &AclMappingInter{repo: repo}
}

func (i *AclMappingInter) Create(aclmappings []domain.AclMapping) ([]domain.AclMapping, error) {
	var err error

	for i := range aclmappings {
		err = (&aclmappings[i]).BeforeActionCreate()
		if err != nil {
			return nil, err
		}
	}

	aclmappings, err = i.repo.Create(aclmappings)
	if err != nil {
		return nil, err
	}

	for i := range aclmappings {
		err = (&aclmappings[i]).AfterActionCreate()
		if err != nil {
			return nil, err
		}
	}

	return aclmappings, nil
}

func (i *AclMappingInter) CreateOne(aclmapping *domain.AclMapping) (*domain.AclMapping, error) {
	err := aclmapping.BeforeActionCreate()
	if err != nil {
		return nil, err
	}

	aclmapping, err = i.repo.CreateOne(aclmapping)
	if err != nil {
		return nil, err
	}

	err = aclmapping.AfterActionCreate()
	if err != nil {
		return nil, err
	}

	return aclmapping, nil
}

func (i *AclMappingInter) Find(filter *usecases.Filter, ownerRelations []domain.Relation) ([]domain.AclMapping, error) {
	aclmappings, err := i.repo.Find(filter, ownerRelations)
	if err != nil {
		return nil, err
	}

	return aclmappings, nil
}

func (i *AclMappingInter) FindByID(id int, filter *usecases.Filter, ownerRelations []domain.Relation) (*domain.AclMapping, error) {
	aclmapping, err := i.repo.FindByID(id, filter, ownerRelations)
	if err != nil {
		return nil, err
	}

	return aclmapping, nil
}

func (i *AclMappingInter) Upsert(aclmappings []domain.AclMapping, filter *usecases.Filter, ownerRelations []domain.Relation) ([]domain.AclMapping, error) {
	aclmappingsToUpdate := []domain.AclMapping{}
	aclmappingsToCreate := []domain.AclMapping{}

	for i := range aclmappings {
		var err error

		if aclmappings[i].ID != 0 {
			err = (&aclmappings[i]).BeforeActionUpdate()
			aclmappingsToUpdate = append(aclmappingsToUpdate, aclmappings[i])
		} else {
			err = (&aclmappings[i]).BeforeActionCreate()
			aclmappingsToCreate = append(aclmappingsToCreate, aclmappings[i])
		}

		if err != nil {
			return nil, err
		}
	}

	aclmappingsToUpdate, err := i.repo.Update(aclmappingsToUpdate, filter, ownerRelations)
	if err != nil {
		return nil, err
	}

	aclmappingsToCreate, err = i.repo.Create(aclmappingsToCreate)
	if err != nil {
		return nil, err
	}

	for i := range aclmappingsToUpdate {
		err = (&aclmappings[i]).AfterActionUpdate()
		if err != nil {
			return nil, err
		}
	}

	for i := range aclmappingsToCreate {
		err = (&aclmappings[i]).AfterActionCreate()
		if err != nil {
			return nil, err
		}
	}

	return append(aclmappingsToUpdate, aclmappingsToCreate...), nil
}

func (i *AclMappingInter) UpsertOne(aclmapping *domain.AclMapping, filter *usecases.Filter, ownerRelations []domain.Relation) (*domain.AclMapping, error) {
	if aclmapping.ID != 0 {
		err := aclmapping.BeforeActionUpdate()
		if err != nil {
			return nil, err
		}

		aclmapping, err = i.repo.UpdateByID(aclmapping.ID, aclmapping, filter, ownerRelations)
		if err != nil {
			return nil, err
		}

		err = aclmapping.AfterActionUpdate()
		if err != nil {
			return nil, err
		}
	} else {
		err := aclmapping.BeforeActionCreate()
		if err != nil {
			return nil, err
		}

		aclmapping, err = i.repo.CreateOne(aclmapping)
		if err != nil {
			return nil, err
		}

		err = aclmapping.AfterActionCreate()
		if err != nil {
			return nil, err
		}
	}

	return aclmapping, nil
}

func (i *AclMappingInter) UpdateByID(id int, aclmapping *domain.AclMapping,
	filter *usecases.Filter, ownerRelations []domain.Relation) (*domain.AclMapping, error) {

	err := aclmapping.BeforeActionUpdate()
	if err != nil {
		return nil, err
	}

	aclmapping, err = i.repo.UpdateByID(id, aclmapping, filter, ownerRelations)
	if err != nil {
		return nil, err
	}

	err = aclmapping.AfterActionUpdate()
	if err != nil {
		return nil, err
	}

	return aclmapping, nil
}

func (i *AclMappingInter) DeleteAll(filter *usecases.Filter, ownerRelations []domain.Relation) error {
	aclmappings, err := i.repo.Find(filter, ownerRelations)
	if err != nil {
		return err
	}

	for i := range aclmappings {
		err = (&aclmappings[i]).BeforeActionDelete()
		if err != nil {
			return err
		}
	}

	err = i.repo.DeleteAll(filter, ownerRelations)
	if err != nil {
		return err
	}

	for i := range aclmappings {
		err = (&aclmappings[i]).AfterActionDelete()
		if err != nil {
			return err
		}
	}

	return nil
}

func (i *AclMappingInter) DeleteByID(id int, filter *usecases.Filter, ownerRelations []domain.Relation) error {
	aclmapping, err := i.repo.FindByID(id, filter, ownerRelations)
	if err != nil {
		return err
	}

	err = aclmapping.BeforeActionDelete()
	if err != nil {
		return err
	}

	err = i.repo.DeleteByID(id, filter, ownerRelations)
	if err != nil {
		return err
	}

	err = aclmapping.AfterActionDelete()
	if err != nil {
		return err
	}

	return nil
}
