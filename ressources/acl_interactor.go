// Generated by: main
// TypeWriter: interactor
// Directive: +gen on Acl

package ressources

import (
	"database/sql"
	"time"

	"github.com/solher/zest/domain"
	"github.com/solher/zest/usecases"
)

func init() {
	usecases.DependencyDirectory.Register(NewAclInter)
}

type AbstractAclRepo interface {
	Create(acls []domain.Acl) ([]domain.Acl, error)
	CreateOne(acl *domain.Acl) (*domain.Acl, error)
	Find(context usecases.QueryContext) ([]domain.Acl, error)
	FindByID(id int, context usecases.QueryContext) (*domain.Acl, error)
	Update(acls []domain.Acl, context usecases.QueryContext) ([]domain.Acl, error)
	UpdateByID(id int, acl *domain.Acl, context usecases.QueryContext) (*domain.Acl, error)
	DeleteAll(context usecases.QueryContext) error
	DeleteByID(id int, context usecases.QueryContext) error
	Raw(query string, values ...interface{}) (*sql.Rows, error)
}

type AclInter struct {
	repo AbstractAclRepo
}

func NewAclInter(repo AbstractAclRepo) *AclInter {
	return &AclInter{repo: repo}
}

func (i *AclInter) RefreshFromRoutes(routes map[usecases.DirectoryKey]usecases.Route) error {
	for dirKey, route := range routes {
		if !route.CheckPermissions {
			continue
		}

		filter := &usecases.Filter{
			Where: map[string]interface{}{
				"ressource": dirKey.Ressource,
				"method":    dirKey.Method,
			},
		}

		acls, err := i.repo.Find(usecases.QueryContext{Filter: filter})
		if err != nil {
			return err
		}

		if len(acls) == 0 {
			_, err := i.repo.CreateOne(&domain.Acl{Ressource: dirKey.Ressource, Method: dirKey.Method})
			if err != nil {
				return err
			}
		}
	}

	return nil
}

func (i *AclInter) BeforeSave(acl *domain.Acl) error {
	acl.ID = 0
	acl.CreatedAt = time.Time{}
	acl.UpdatedAt = time.Time{}

	err := acl.ScopeModel()
	if err != nil {
		return err
	}

	return nil
}

func (i *AclInter) Create(acls []domain.Acl) ([]domain.Acl, error) {
	var err error

	for k := range acls {
		err := i.BeforeSave(&acls[k])
		if err != nil {
			return nil, err
		}
	}

	acls, err = i.repo.Create(acls)
	if err != nil {
		return nil, err
	}

	return acls, nil
}

func (i *AclInter) CreateOne(acl *domain.Acl) (*domain.Acl, error) {
	err := i.BeforeSave(acl)
	if err != nil {
		return nil, err
	}

	acl, err = i.repo.CreateOne(acl)
	if err != nil {
		return nil, err
	}

	return acl, nil
}

func (i *AclInter) Find(context usecases.QueryContext) ([]domain.Acl, error) {
	acls, err := i.repo.Find(context)
	if err != nil {
		return nil, err
	}

	return acls, nil
}

func (i *AclInter) FindByID(id int, context usecases.QueryContext) (*domain.Acl, error) {
	acl, err := i.repo.FindByID(id, context)
	if err != nil {
		return nil, err
	}

	return acl, nil
}

func (i *AclInter) Upsert(acls []domain.Acl, context usecases.QueryContext) ([]domain.Acl, error) {
	aclsToUpdate := []domain.Acl{}
	aclsToCreate := []domain.Acl{}

	for k := range acls {
		err := i.BeforeSave(&acls[k])
		if err != nil {
			return nil, err
		}

		if acls[k].ID != 0 {
			aclsToUpdate = append(aclsToUpdate, acls[k])
		} else {
			aclsToCreate = append(aclsToCreate, acls[k])
		}
	}

	aclsToUpdate, err := i.repo.Update(aclsToUpdate, context)
	if err != nil {
		return nil, err
	}

	aclsToCreate, err = i.repo.Create(aclsToCreate)
	if err != nil {
		return nil, err
	}

	return append(aclsToUpdate, aclsToCreate...), nil
}

func (i *AclInter) UpsertOne(acl *domain.Acl, context usecases.QueryContext) (*domain.Acl, error) {
	err := i.BeforeSave(acl)
	if err != nil {
		return nil, err
	}

	if acl.ID != 0 {
		acl, err = i.repo.UpdateByID(acl.ID, acl, context)
	} else {
		acl, err = i.repo.CreateOne(acl)
	}

	if err != nil {
		return nil, err
	}

	return acl, nil
}

func (i *AclInter) UpdateByID(id int, acl *domain.Acl,
	context usecases.QueryContext) (*domain.Acl, error) {

	err := i.BeforeSave(acl)
	if err != nil {
		return nil, err
	}

	acl, err = i.repo.UpdateByID(id, acl, context)
	if err != nil {
		return nil, err
	}

	return acl, nil
}

func (i *AclInter) DeleteAll(context usecases.QueryContext) error {
	err := i.repo.DeleteAll(context)
	if err != nil {
		return err
	}

	return nil
}

func (i *AclInter) DeleteByID(id int, context usecases.QueryContext) error {
	err := i.repo.DeleteByID(id, context)
	if err != nil {
		return err
	}

	return nil
}
