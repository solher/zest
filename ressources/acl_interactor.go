// Generated by: main
// TypeWriter: interactor
// Directive: +gen on Acl

package ressources

import (
	"database/sql"

	"github.com/Solher/auth-scaffold/domain"
	"github.com/Solher/auth-scaffold/interfaces"
)

type AbstractAclRepo interface {
	Create(acls []domain.Acl) ([]domain.Acl, error)
	CreateOne(acl *domain.Acl) (*domain.Acl, error)
	Find(filter *interfaces.Filter, ownerRelations []domain.Relation) ([]domain.Acl, error)
	FindByID(id int, filter *interfaces.Filter, ownerRelations []domain.Relation) (*domain.Acl, error)
	Upsert(acls []domain.Acl, filter *interfaces.Filter, ownerRelations []domain.Relation) ([]domain.Acl, error)
	UpsertOne(acl *domain.Acl, filter *interfaces.Filter, ownerRelations []domain.Relation) (*domain.Acl, error)
	DeleteAll(filter *interfaces.Filter, ownerRelations []domain.Relation) error
	DeleteByID(id int, filter *interfaces.Filter, ownerRelations []domain.Relation) error
	Raw(query string, values ...interface{}) (*sql.Rows, error)
}

type AclInter struct {
	repo AbstractAclRepo
}

func NewAclInter(repo AbstractAclRepo) *AclInter {
	return &AclInter{repo: repo}
}

func (i *AclInter) Create(acls []domain.Acl) ([]domain.Acl, error) {
	acls, err := i.repo.Create(acls)
	return acls, err
}

func (i *AclInter) CreateOne(acl *domain.Acl) (*domain.Acl, error) {
	acl, err := i.repo.CreateOne(acl)
	return acl, err
}

func (i *AclInter) Find(filter *interfaces.Filter, ownerRelations []domain.Relation) ([]domain.Acl, error) {
	acls, err := i.repo.Find(filter, ownerRelations)
	return acls, err
}

func (i *AclInter) FindByID(id int, filter *interfaces.Filter, ownerRelations []domain.Relation) (*domain.Acl, error) {
	acl, err := i.repo.FindByID(id, filter, ownerRelations)
	return acl, err
}

func (i *AclInter) Upsert(acls []domain.Acl, filter *interfaces.Filter, ownerRelations []domain.Relation) ([]domain.Acl, error) {
	acls, err := i.repo.Upsert(acls, filter, ownerRelations)
	return acls, err
}

func (i *AclInter) UpsertOne(acl *domain.Acl, filter *interfaces.Filter, ownerRelations []domain.Relation) (*domain.Acl, error) {
	acl, err := i.repo.UpsertOne(acl, filter, ownerRelations)
	return acl, err
}

func (i *AclInter) DeleteAll(filter *interfaces.Filter, ownerRelations []domain.Relation) error {
	err := i.repo.DeleteAll(filter, ownerRelations)
	return err
}

func (i *AclInter) DeleteByID(id int, filter *interfaces.Filter, ownerRelations []domain.Relation) error {
	err := i.repo.DeleteByID(id, filter, ownerRelations)
	return err
}
