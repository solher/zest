// Generated by: main
// TypeWriter: interactor
// Directive: +gen on Acl

package ressources

import (
	"database/sql"

	"github.com/Solher/zest/domain"
	"github.com/Solher/zest/usecases"
)

type AbstractAclRepo interface {
	Create(acls []domain.Acl) ([]domain.Acl, error)
	CreateOne(acl *domain.Acl) (*domain.Acl, error)
	Find(filter *usecases.Filter, ownerRelations []domain.Relation) ([]domain.Acl, error)
	FindByID(id int, filter *usecases.Filter, ownerRelations []domain.Relation) (*domain.Acl, error)
	Update(acls []domain.Acl, filter *usecases.Filter, ownerRelations []domain.Relation) ([]domain.Acl, error)
	UpdateByID(id int, acl *domain.Acl, filter *usecases.Filter, ownerRelations []domain.Relation) (*domain.Acl, error)
	DeleteAll(filter *usecases.Filter, ownerRelations []domain.Relation) error
	DeleteByID(id int, filter *usecases.Filter, ownerRelations []domain.Relation) error
	Raw(query string, values ...interface{}) (*sql.Rows, error)
}

type AclInter struct {
	repo AbstractAclRepo
}

func NewAclInter(repo AbstractAclRepo) *AclInter {
	return &AclInter{repo: repo}
}

func (i *AclInter) Create(acls []domain.Acl) ([]domain.Acl, error) {
	var err error

	for k := range acls {
		err = i.BeforeCreate(&acls[k])
		if err != nil {
			return nil, err
		}
	}

	acls, err = i.repo.Create(acls)
	if err != nil {
		return nil, err
	}

	for k := range acls {
		err = i.AfterCreate(&acls[k])
		if err != nil {
			return nil, err
		}
	}

	return acls, nil
}

func (i *AclInter) CreateOne(acl *domain.Acl) (*domain.Acl, error) {
	err := i.BeforeCreate(acl)
	if err != nil {
		return nil, err
	}

	acl, err = i.repo.CreateOne(acl)
	if err != nil {
		return nil, err
	}

	err = i.AfterCreate(acl)
	if err != nil {
		return nil, err
	}

	return acl, nil
}

func (i *AclInter) Find(filter *usecases.Filter, ownerRelations []domain.Relation) ([]domain.Acl, error) {
	acls, err := i.repo.Find(filter, ownerRelations)
	if err != nil {
		return nil, err
	}

	return acls, nil
}

func (i *AclInter) FindByID(id int, filter *usecases.Filter, ownerRelations []domain.Relation) (*domain.Acl, error) {
	acl, err := i.repo.FindByID(id, filter, ownerRelations)
	if err != nil {
		return nil, err
	}

	return acl, nil
}

func (i *AclInter) Upsert(acls []domain.Acl, filter *usecases.Filter, ownerRelations []domain.Relation) ([]domain.Acl, error) {
	aclsToUpdate := []domain.Acl{}
	aclsToCreate := []domain.Acl{}

	for k := range acls {
		var err error

		if acls[k].ID != 0 {
			err = i.BeforeUpdate(&acls[k])
			aclsToUpdate = append(aclsToUpdate, acls[k])
		} else {
			err = i.BeforeCreate(&acls[k])
			aclsToCreate = append(aclsToCreate, acls[k])
		}

		if err != nil {
			return nil, err
		}
	}

	aclsToUpdate, err := i.repo.Update(aclsToUpdate, filter, ownerRelations)
	if err != nil {
		return nil, err
	}

	aclsToCreate, err = i.repo.Create(aclsToCreate)
	if err != nil {
		return nil, err
	}

	for k := range aclsToUpdate {
		err = i.AfterUpdate(&acls[k])
		if err != nil {
			return nil, err
		}
	}

	for k := range aclsToCreate {
		err = i.AfterCreate(&acls[k])
		if err != nil {
			return nil, err
		}
	}

	return append(aclsToUpdate, aclsToCreate...), nil
}

func (i *AclInter) UpsertOne(acl *domain.Acl, filter *usecases.Filter, ownerRelations []domain.Relation) (*domain.Acl, error) {
	if acl.ID != 0 {
		err := i.BeforeUpdate(acl)
		if err != nil {
			return nil, err
		}

		acl, err = i.repo.UpdateByID(acl.ID, acl, filter, ownerRelations)
		if err != nil {
			return nil, err
		}

		err = i.AfterUpdate(acl)
		if err != nil {
			return nil, err
		}
	} else {
		err := i.BeforeCreate(acl)
		if err != nil {
			return nil, err
		}

		acl, err = i.repo.CreateOne(acl)
		if err != nil {
			return nil, err
		}

		err = i.AfterCreate(acl)
		if err != nil {
			return nil, err
		}
	}

	return acl, nil
}

func (i *AclInter) UpdateByID(id int, acl *domain.Acl,
	filter *usecases.Filter, ownerRelations []domain.Relation) (*domain.Acl, error) {

	err := i.BeforeUpdate(acl)
	if err != nil {
		return nil, err
	}

	acl, err = i.repo.UpdateByID(id, acl, filter, ownerRelations)
	if err != nil {
		return nil, err
	}

	err = i.AfterUpdate(acl)
	if err != nil {
		return nil, err
	}

	return acl, nil
}

func (i *AclInter) DeleteAll(filter *usecases.Filter, ownerRelations []domain.Relation) error {
	acls, err := i.repo.Find(filter, ownerRelations)
	if err != nil {
		return err
	}

	for k := range acls {
		err = i.BeforeDelete(&acls[k])
		if err != nil {
			return err
		}
	}

	err = i.repo.DeleteAll(filter, ownerRelations)
	if err != nil {
		return err
	}

	for k := range acls {
		err = i.AfterDelete(&acls[k])
		if err != nil {
			return err
		}
	}

	return nil
}

func (i *AclInter) DeleteByID(id int, filter *usecases.Filter, ownerRelations []domain.Relation) error {
	acl, err := i.repo.FindByID(id, filter, ownerRelations)
	if err != nil {
		return err
	}

	err = i.BeforeDelete(acl)
	if err != nil {
		return err
	}

	err = i.repo.DeleteByID(id, filter, ownerRelations)
	if err != nil {
		return err
	}

	err = i.AfterDelete(acl)
	if err != nil {
		return err
	}

	return nil
}
