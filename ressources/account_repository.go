// Generated by: main
// TypeWriter: repository
// Directive: +gen on Account

package ressources

import (
	"database/sql"
	"strings"

	"github.com/Solher/auth-scaffold/domain"
	"github.com/Solher/auth-scaffold/interfaces"
	"github.com/Solher/auth-scaffold/internalerrors"
)

type AccountRepo struct {
	store interfaces.AbstractGormStore
}

func NewAccountRepo(store interfaces.AbstractGormStore) *AccountRepo {
	return &AccountRepo{store: store}
}

func (r *AccountRepo) Create(accounts []domain.Account) ([]domain.Account, error) {
	db := r.store.GetDB()
	transaction := db.Begin()

	for i, account := range accounts {
		err := db.Create(&account).Error
		if err != nil {
			transaction.Rollback()

			if strings.Contains(err.Error(), "constraint") {
				return nil, internalerrors.NewViolatedConstraint(err.Error())
			}

			return nil, internalerrors.DatabaseError
		}

		accounts[i] = account
	}

	transaction.Commit()
	return accounts, nil
}

func (r *AccountRepo) CreateOne(account *domain.Account) (*domain.Account, error) {
	db := r.store.GetDB()

	err := db.Create(account).Error
	if err != nil {
		if strings.Contains(err.Error(), "constraint") {
			return nil, internalerrors.NewViolatedConstraint(err.Error())
		}

		return nil, internalerrors.DatabaseError
	}

	return account, nil
}

func (r *AccountRepo) Find(filter *interfaces.Filter, ownerRelations []domain.Relation) ([]domain.Account, error) {
	query, err := r.store.BuildQuery(filter, ownerRelations)
	if err != nil {
		return nil, internalerrors.DatabaseError
	}

	accounts := []domain.Account{}

	err = query.Find(&accounts).Error
	if err != nil {
		return nil, internalerrors.DatabaseError
	}

	return accounts, nil
}

func (r *AccountRepo) FindByID(id int, filter *interfaces.Filter, ownerRelations []domain.Relation) (*domain.Account, error) {
	query, err := r.store.BuildQuery(filter, ownerRelations)
	if err != nil {
		return nil, internalerrors.DatabaseError
	}

	account := domain.Account{}

	err = query.Where("accounts.id = ?", id).First(&account).Error
	if err != nil {
		return nil, internalerrors.DatabaseError
	}

	return &account, nil
}

func (r *AccountRepo) Upsert(accounts []domain.Account, filter *interfaces.Filter, ownerRelations []domain.Relation) ([]domain.Account, error) {
	db := r.store.GetDB()
	transaction := db.Begin()

	query, err := r.store.BuildQuery(filter, ownerRelations)
	if err != nil {
		return nil, internalerrors.DatabaseError
	}

	for i, account := range accounts {
		queryCopy := *query

		if account.ID != 0 {
			oldUser := domain.Account{}

			err := queryCopy.Where("accounts.id = ?", account.ID).First(&oldUser).Updates(account).Error
			if err != nil {
				transaction.Rollback()

				if strings.Contains(err.Error(), "constraint") {
					return nil, internalerrors.NewViolatedConstraint(err.Error())
				}

				return nil, internalerrors.DatabaseError
			}
		} else {
			err := db.Create(&account).Error
			if err != nil {
				transaction.Rollback()

				if strings.Contains(err.Error(), "constraint") {
					return nil, internalerrors.NewViolatedConstraint(err.Error())
				}

				return nil, internalerrors.DatabaseError
			}
		}

		accounts[i] = account
	}

	transaction.Commit()
	return accounts, nil
}

func (r *AccountRepo) UpsertOne(account *domain.Account, filter *interfaces.Filter, ownerRelations []domain.Relation) (*domain.Account, error) {
	db := r.store.GetDB()

	query, err := r.store.BuildQuery(filter, ownerRelations)
	if err != nil {
		return nil, internalerrors.DatabaseError
	}

	if account.ID != 0 {
		oldUser := domain.Account{}

		err := query.Where("accounts.id = ?", account.ID).First(&oldUser).Updates(account).Error
		if err != nil {
			if strings.Contains(err.Error(), "constraint") {
				return nil, internalerrors.NewViolatedConstraint(err.Error())
			}

			return nil, internalerrors.DatabaseError
		}
	} else {
		err := db.Create(&account).Error
		if err != nil {
			if strings.Contains(err.Error(), "constraint") {
				return nil, internalerrors.NewViolatedConstraint(err.Error())
			}

			return nil, internalerrors.DatabaseError
		}
	}

	return account, nil
}

func (r *AccountRepo) DeleteAll(filter *interfaces.Filter, ownerRelations []domain.Relation) error {
	query, err := r.store.BuildQuery(filter, ownerRelations)
	if err != nil {
		return internalerrors.DatabaseError
	}

	err = query.Delete(domain.Account{}).Error
	if err != nil {
		return internalerrors.DatabaseError
	}

	return nil
}

func (r *AccountRepo) DeleteByID(id int, filter *interfaces.Filter, ownerRelations []domain.Relation) error {
	query, err := r.store.BuildQuery(filter, ownerRelations)
	if err != nil {
		return internalerrors.DatabaseError
	}

	err = query.Delete(&domain.Account{GormModel: domain.GormModel{ID: id}}).Error
	if err != nil {
		return internalerrors.DatabaseError
	}

	return nil
}

func (r *AccountRepo) Raw(query string, values ...interface{}) (*sql.Rows, error) {
	db := r.store.GetDB()

	rows, err := db.Raw(query, values...).Rows()
	if err != nil {
		if strings.Contains(err.Error(), "constraint") {
			return nil, internalerrors.NewViolatedConstraint(err.Error())
		}

		return nil, internalerrors.DatabaseError
	}

	return rows, nil
}
