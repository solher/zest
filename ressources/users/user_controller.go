// Generated by: main
// TypeWriter: controller
// Directive: +gen on User

package users

import (
	"encoding/json"
	"net/http"
	"strconv"

	"github.com/Solher/auth-scaffold/apierrors"
	"github.com/Solher/auth-scaffold/interfaces"
	"github.com/julienschmidt/httprouter"
)

type UserInteractor interface {
	Create(users []User) ([]User, error)
	Find(filter *interfaces.Filter) ([]User, error)
	FindByID(id int) (*User, error)
	Upsert(users []User) ([]User, error)
	DeleteAll(filter *interfaces.Filter) error
	DeleteByID(id int) error
}

type Controller struct {
	interactor UserInteractor
	render     interfaces.Render
}

func NewController(interactor UserInteractor, render interfaces.Render, routesDir interfaces.RouteDirectory) *Controller {
	controller := &Controller{interactor: interactor, render: render}

	if routesDir != nil {
		addRoutes(routesDir, controller)
	}

	return controller
}

func (c *Controller) Create(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {
	var users []User
	err := json.NewDecoder(r.Body).Decode(&users)
	if err != nil {
		c.render.JSONError(w, http.StatusBadRequest, apierrors.BodyDecodingError, err)
		return
	}

	users, err = c.interactor.Create(users)
	if err != nil {
		c.render.JSONError(w, http.StatusInternalServerError, apierrors.InternalServerError, err)
		return
	}

	c.render.JSON(w, http.StatusCreated, users)
}

func (c *Controller) Find(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {
	filter, err := interfaces.GetQueryFilter(r)
	if err != nil {
		c.render.JSONError(w, http.StatusBadRequest, apierrors.FilterDecodingError, err)
		return
	}

	users, err := c.interactor.Find(filter)
	if err != nil {
		c.render.JSONError(w, http.StatusInternalServerError, apierrors.InternalServerError, err)
		return
	}

	c.render.JSON(w, http.StatusOK, users)
}

func (c *Controller) FindByID(w http.ResponseWriter, r *http.Request, params httprouter.Params) {
	id, err := strconv.Atoi(params.ByName("id"))
	if err != nil {
		c.render.JSONError(w, http.StatusBadRequest, apierrors.InvalidPathParams, err)
		return
	}

	user, err := c.interactor.FindByID(id)
	if err != nil {
		c.render.JSONError(w, http.StatusUnauthorized, apierrors.Unauthorized, err)
		return
	}

	c.render.JSON(w, http.StatusOK, user)
}

func (c *Controller) Upsert(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {
	var users []User
	err := json.NewDecoder(r.Body).Decode(&users)
	if err != nil {
		c.render.JSONError(w, http.StatusBadRequest, apierrors.BodyDecodingError, err)
		return
	}

	users, err = c.interactor.Upsert(users)
	if err != nil {
		c.render.JSONError(w, http.StatusInternalServerError, apierrors.InternalServerError, err)
		return
	}

	c.render.JSON(w, http.StatusCreated, users)
}

func (c *Controller) DeleteAll(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {
	filter, err := interfaces.GetQueryFilter(r)
	if err != nil {
		c.render.JSONError(w, http.StatusBadRequest, apierrors.FilterDecodingError, err)
		return
	}

	err = c.interactor.DeleteAll(filter)
	if err != nil {
		c.render.JSONError(w, http.StatusInternalServerError, apierrors.InternalServerError, err)
		return
	}

	c.render.JSON(w, http.StatusNoContent, nil)
}

func (c *Controller) DeleteByID(w http.ResponseWriter, r *http.Request, params httprouter.Params) {
	id, err := strconv.Atoi(params.ByName("id"))
	if err != nil {
		c.render.JSONError(w, http.StatusBadRequest, apierrors.InvalidPathParams, err)
		return
	}

	err = c.interactor.DeleteByID(id)
	if err != nil {
		c.render.JSONError(w, http.StatusUnauthorized, apierrors.Unauthorized, err)
		return
	}

	c.render.JSON(w, http.StatusNoContent, nil)
}
