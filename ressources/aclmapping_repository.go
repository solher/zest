// Generated by: main
// TypeWriter: repository
// Directive: +gen on AclMapping

package ressources

import (
	"database/sql"
	"strings"

	"github.com/Solher/auth-scaffold/domain"
	"github.com/Solher/auth-scaffold/interfaces"
	"github.com/Solher/auth-scaffold/internalerrors"
)

type AclMappingRepo struct {
	store interfaces.AbstractGormStore
}

func NewAclMappingRepo(store interfaces.AbstractGormStore) *AclMappingRepo {
	return &AclMappingRepo{store: store}
}

func (r *AclMappingRepo) Create(aclmappings []domain.AclMapping) ([]domain.AclMapping, error) {
	db := r.store.GetDB()
	transaction := db.Begin()

	for i, aclmapping := range aclmappings {
		err := db.Create(&aclmapping).Error
		if err != nil {
			transaction.Rollback()

			if strings.Contains(err.Error(), "constraint") {
				return nil, internalerrors.NewViolatedConstraint(err.Error())
			}

			return nil, internalerrors.DatabaseError
		}

		aclmappings[i] = aclmapping
	}

	transaction.Commit()
	return aclmappings, nil
}

func (r *AclMappingRepo) CreateOne(aclmapping *domain.AclMapping) (*domain.AclMapping, error) {
	db := r.store.GetDB()

	err := db.Create(aclmapping).Error
	if err != nil {
		if strings.Contains(err.Error(), "constraint") {
			return nil, internalerrors.NewViolatedConstraint(err.Error())
		}

		return nil, internalerrors.DatabaseError
	}

	return aclmapping, nil
}

func (r *AclMappingRepo) Find(filter *interfaces.Filter, ownerRelations []domain.Relation) ([]domain.AclMapping, error) {
	query, err := r.store.BuildQuery(filter, ownerRelations)
	if err != nil {
		return nil, internalerrors.DatabaseError
	}

	aclmappings := []domain.AclMapping{}

	err = query.Find(&aclmappings).Error
	if err != nil {
		return nil, internalerrors.DatabaseError
	}

	return aclmappings, nil
}

func (r *AclMappingRepo) FindByID(id int, filter *interfaces.Filter, ownerRelations []domain.Relation) (*domain.AclMapping, error) {
	query, err := r.store.BuildQuery(filter, ownerRelations)
	if err != nil {
		return nil, internalerrors.DatabaseError
	}

	aclmapping := domain.AclMapping{}

	err = query.Where("aclmappings.id = ?", id).First(&aclmapping).Error
	if err != nil {
		return nil, internalerrors.DatabaseError
	}

	return &aclmapping, nil
}

func (r *AclMappingRepo) Upsert(aclmappings []domain.AclMapping, filter *interfaces.Filter, ownerRelations []domain.Relation) ([]domain.AclMapping, error) {
	db := r.store.GetDB()
	transaction := db.Begin()

	query, err := r.store.BuildQuery(filter, ownerRelations)
	if err != nil {
		return nil, internalerrors.DatabaseError
	}

	for i, aclmapping := range aclmappings {
		queryCopy := *query

		if aclmapping.ID != 0 {
			oldUser := domain.AclMapping{}

			err := queryCopy.Where("aclmappings.id = ?", aclmapping.ID).First(&oldUser).Updates(aclmapping).Error
			if err != nil {
				transaction.Rollback()

				if strings.Contains(err.Error(), "constraint") {
					return nil, internalerrors.NewViolatedConstraint(err.Error())
				}

				return nil, internalerrors.DatabaseError
			}
		} else {
			err := db.Create(&aclmapping).Error
			if err != nil {
				transaction.Rollback()

				if strings.Contains(err.Error(), "constraint") {
					return nil, internalerrors.NewViolatedConstraint(err.Error())
				}

				return nil, internalerrors.DatabaseError
			}
		}

		aclmappings[i] = aclmapping
	}

	transaction.Commit()
	return aclmappings, nil
}

func (r *AclMappingRepo) UpsertOne(aclmapping *domain.AclMapping, filter *interfaces.Filter, ownerRelations []domain.Relation) (*domain.AclMapping, error) {
	db := r.store.GetDB()

	query, err := r.store.BuildQuery(filter, ownerRelations)
	if err != nil {
		return nil, internalerrors.DatabaseError
	}

	if aclmapping.ID != 0 {
		oldUser := domain.AclMapping{}

		err := query.Where("aclmappings.id = ?", aclmapping.ID).First(&oldUser).Updates(aclmapping).Error
		if err != nil {
			if strings.Contains(err.Error(), "constraint") {
				return nil, internalerrors.NewViolatedConstraint(err.Error())
			}

			return nil, internalerrors.DatabaseError
		}
	} else {
		err := db.Create(&aclmapping).Error
		if err != nil {
			if strings.Contains(err.Error(), "constraint") {
				return nil, internalerrors.NewViolatedConstraint(err.Error())
			}

			return nil, internalerrors.DatabaseError
		}
	}

	return aclmapping, nil
}

func (r *AclMappingRepo) UpdateByID(id int, aclmapping *domain.AclMapping,
	filter *interfaces.Filter, ownerRelations []domain.Relation) (*domain.AclMapping, error) {

	query, err := r.store.BuildQuery(filter, ownerRelations)
	if err != nil {
		return nil, internalerrors.DatabaseError
	}

	oldUser := domain.AclMapping{}

	err = query.Where("aclmappings.id = ?", id).First(&oldUser).Updates(aclmapping).Error
	if err != nil {
		if strings.Contains(err.Error(), "constraint") {
			return nil, internalerrors.NewViolatedConstraint(err.Error())
		}

		return nil, internalerrors.DatabaseError
	}

	return aclmapping, nil
}

func (r *AclMappingRepo) DeleteAll(filter *interfaces.Filter, ownerRelations []domain.Relation) error {
	query, err := r.store.BuildQuery(filter, ownerRelations)
	if err != nil {
		return internalerrors.DatabaseError
	}

	err = query.Delete(domain.AclMapping{}).Error
	if err != nil {
		return internalerrors.DatabaseError
	}

	return nil
}

func (r *AclMappingRepo) DeleteByID(id int, filter *interfaces.Filter, ownerRelations []domain.Relation) error {
	query, err := r.store.BuildQuery(filter, ownerRelations)
	if err != nil {
		return internalerrors.DatabaseError
	}

	err = query.Delete(&domain.AclMapping{GormModel: domain.GormModel{ID: id}}).Error
	if err != nil {
		return internalerrors.DatabaseError
	}

	return nil
}

func (r *AclMappingRepo) Raw(query string, values ...interface{}) (*sql.Rows, error) {
	db := r.store.GetDB()

	rows, err := db.Raw(query, values...).Rows()
	if err != nil {
		if strings.Contains(err.Error(), "constraint") {
			return nil, internalerrors.NewViolatedConstraint(err.Error())
		}

		return nil, internalerrors.DatabaseError
	}

	return rows, nil
}
